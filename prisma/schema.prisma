generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String
  image       String
  price       Float?   @default(0)
  position    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lessons     Lesson[]
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  content     String?
  video_url   String?
  transcript  String?
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  quiz        Quiz?

  @@index([moduleId])
}

model Quiz {
  id        String         @id @default(cuid())
  lessonId  String         @unique
  lesson    Lesson         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions QuizQuestion[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model QuizQuestion {
  id       String       @id @default(cuid())
  quizId   String
  quiz     Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  question String
  options  QuizOption[]
  order    Int          @default(0)

  @@index([quizId])
}

model QuizOption {
  id                String       @id @default(cuid())
  questionId        String
  question          QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  optionText        String
  isCorrect         Boolean
  correctComment    String?
  incorrectComment  String?

  @@index([questionId])
}
